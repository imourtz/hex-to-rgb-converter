{"ast":null,"code":"'use strict';\n\nconst hexCharacters = 'a-f\\\\d';\nconst match3or4Hex = \"#?[\".concat(hexCharacters, \"]{3}[\").concat(hexCharacters, \"]?\");\nconst match6or8Hex = \"#?[\".concat(hexCharacters, \"]{6}([\").concat(hexCharacters, \"]{2})?\");\nconst nonHexChars = new RegExp(\"[^#\".concat(hexCharacters, \"]\"), 'gi');\nconst validHexSize = new RegExp(\"^\".concat(match3or4Hex, \"$|^\").concat(match6or8Hex, \"$\"), 'i');\n\nmodule.exports = (hex, options = {}) => {\n  if (typeof hex !== 'string' || nonHexChars.test(hex) || !validHexSize.test(hex)) {\n    throw new TypeError('Expected a valid hex string');\n  }\n\n  hex = hex.replace(/^#/, '');\n  let alpha = 1;\n\n  if (hex.length === 8) {\n    alpha = parseInt(hex.slice(6, 8), 16) / 255;\n    hex = hex.slice(0, 6);\n  }\n\n  if (hex.length === 4) {\n    alpha = parseInt(hex.slice(3, 4).repeat(2), 16) / 255;\n    hex = hex.slice(0, 3);\n  }\n\n  if (hex.length === 3) {\n    hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];\n  }\n\n  const num = parseInt(hex, 16);\n  const red = num >> 16;\n  const green = num >> 8 & 255;\n  const blue = num & 255;\n  return options.format === 'array' ? [red, green, blue, alpha] : {\n    red,\n    green,\n    blue,\n    alpha\n  };\n};","map":null,"metadata":{},"sourceType":"script"}